/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace HoneyCheckerV5 {
  export type HoneyResponseStruct = {
    buyResult: BigNumberish;
    tokenBalance2: BigNumberish;
    sellResult: BigNumberish;
    buyCost: BigNumberish;
    sellCost: BigNumberish;
    expectedAmount: BigNumberish;
  };

  export type HoneyResponseStructOutput = [
    buyResult: bigint,
    tokenBalance2: bigint,
    sellResult: bigint,
    buyCost: bigint,
    sellCost: bigint,
    expectedAmount: bigint
  ] & {
    buyResult: bigint;
    tokenBalance2: bigint;
    sellResult: bigint;
    buyCost: bigint;
    sellCost: bigint;
    expectedAmount: bigint;
  };
}

export interface HoneyCheckInterface extends Interface {
  getFunction(nameOrSignature: "honeyCheck" | "router"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "honeyCheck",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;

  decodeFunctionResult(functionFragment: "honeyCheck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
}

export interface HoneyCheck extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: HoneyCheckInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  honeyCheck: TypedContractMethod<
    [targetTokenAddress: AddressLike, idexRouterAddres: AddressLike],
    [HoneyCheckerV5.HoneyResponseStructOutput],
    "payable"
  >;

  router: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "honeyCheck"
  ): TypedContractMethod<
    [targetTokenAddress: AddressLike, idexRouterAddres: AddressLike],
    [HoneyCheckerV5.HoneyResponseStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
